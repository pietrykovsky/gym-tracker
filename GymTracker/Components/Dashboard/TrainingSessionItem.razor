@using GymTracker.Data
@using BlazorBootstrap

@namespace GymTracker.Components.Dashboard

<div class="accordion-item">
    <h2 class="accordion-header">
        <button class="accordion-button btn-primary @(IsExpanded ? "" : "collapsed")" 
                type="button" 
                data-bs-toggle="collapse" 
                data-bs-target="#collapse-session-@Session.Id" 
                aria-expanded="@IsExpanded"
                @onclick="OnToggle">
            <div class="d-flex justify-content-between align-items-center w-100">
                <span class="me-auto">
                    <Icon Name="IconName.Stopwatch" /> Training Session
                </span>
                <div class="d-flex gap-2 align-items-center">
                    <Badge Color="BadgeColor.Primary">@Session.Activities.Count exercises</Badge>
                </div>
            </div>
        </button>
    </h2>
    <div id="collapse-session-@Session.Id" 
         class="accordion-collapse collapse @(IsExpanded ? "show" : "")"
         data-bs-parent="#eventsAccordion">
        <div class="accordion-body">
            <div class="list-group mb-3">
                @foreach (var activity in Session.Activities.OrderBy(a => a.Order))
                {
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-1">@activity.Exercise?.Name</h6>
                            <Badge Color="BadgeColor.Secondary">
                                @activity.Sets.Count @(activity.Sets.Count == 1 ? "set" : "sets")
                            </Badge>
                        </div>
                        <div class="table-responsive mt-2">
                            <table class="table table-sm mb-0">
                                <thead>
                                    <tr>
                                        <th>Set</th>
                                        <th>Reps</th>
                                        <th>Weight</th>
                                        <th>Rest</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var set in activity.Sets.OrderBy(s => s.Order))
                                    {
                                        <tr>
                                            <td>@set.Order</td>
                                            <td>@set.Repetitions</td>
                                            <td>@(set.Weight.HasValue ? $"{set.Weight:F1}kg" : "-")</td>
                                            <td>@(set.RestAfterDuration.HasValue ? $"{set.RestAfterDuration}s" : "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>

            @if (!string.IsNullOrWhiteSpace(Session.Notes))
            {
                <div class="mt-3">
                    <h6 class="text-muted">Notes</h6>
                    <p class="mb-0">@Session.Notes</p>
                </div>
            }

            <div class="mt-3 d-flex justify-content-end gap-2">
                <Button Color="ButtonColor.Primary" @onclick="StartEdit">
                    <Icon Name="IconName.Pencil" /> Edit
                </Button>
                <Button Color="ButtonColor.Danger" @onclick="OnDelete">
                    <Icon Name="IconName.Trash" /> Delete
                </Button>
            </div>
        </div>
    </div>
</div>

<TrainingSessionModal @ref="editModal" 
                     IsEdit="true" 
                     ExistingSession="Session"
                     OnSessionSaved="HandleEdit" />

@code {
    [Parameter, EditorRequired]
    public TrainingSession Session { get; set; } = default!;

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<TrainingSession> OnEditRequested { get; set; }

    [Parameter]
    public EventCallback<TrainingSession> OnDeleteRequested { get; set; }

    [Parameter]
    public EventCallback<int> OnToggleRequested { get; set; }

    private TrainingSessionModal? editModal;

    private async Task StartEdit()
    {
        if (editModal is not null)
        {
            await editModal.Show();
        }
    }
    
    private Task HandleEdit(TrainingSession trainingSession) => OnEditRequested.InvokeAsync(trainingSession);
    private Task OnToggle() => OnToggleRequested.InvokeAsync(Session.Id);
    private Task OnDelete() => OnDeleteRequested.InvokeAsync(Session);
}