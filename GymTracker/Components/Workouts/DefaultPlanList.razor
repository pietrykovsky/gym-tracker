@using GymTracker.Data
@using GymTracker.Services
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization

@inject IDefaultTrainingPlanService DefaultTrainingPlanService
@inject ITrainingPlanCategoryService CategoryService
@inject IPlanActivityService ActivityService

@namespace GymTracker.Components.Workouts

<ConfirmDialog @ref="dialog" />

<div class="container-fluid">
    <div class="row my-2">
        <!-- Search -->
        <div class="col-md-8 col-lg-6 col-xl-4 mb-1">
            <AutoComplete @bind-Value="searchedPlanName"
                        TItem="DefaultTrainingPlan"
                        DataProvider="PlansDataProvider"
                        PropertyName="Name"
                        Placeholder="Search training plans..."
                        OnChanged="FilterPlans" />
        </div>

        <!-- Category Filter -->
        <div class="col-md-4 col-lg-3 col-xl-2 mb-1">
            <div class="form-group">
                <select class="form-select" @bind="selectedCategoryId" @bind:after="FilterPlans">
                    <option value="0">All Categories</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="d-flex flex-md-row gap-3 align-items-start align-items-md-center flex-wrap">
        @if (!string.IsNullOrEmpty(searchedPlanName))
        {
            <Badge Color="BadgeColor.Light" IndicatorType="BadgeIndicatorType.RoundedPill" @onclick="ClearSearchFilter">
                @searchedPlanName <Icon Name="IconName.X" />
            </Badge>
        }
        @if (selectedCategoryId > 0)
        {
            <Badge Color="BadgeColor.Light" IndicatorType="BadgeIndicatorType.RoundedPill" @onclick="ClearCategoryFilter">
                @categories.Find(c => c.Id == selectedCategoryId)?.Name <Icon Name="IconName.X" />
            </Badge>
        }
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <Spinner />
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Categories</th>
                        <th>Exercises</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!pagedPlans.Any())
                    {
                        <tr>
                            <td colspan="4" class="text-center">No training plans found</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var plan in pagedPlans)
                        {
                            <tr @onclick="() => ShowPlanDetails(plan)" style="cursor: pointer;">
                                <td>@plan.Name</td>
                                <td>
                                    @foreach (var category in plan.Categories)
                                    {
                                        <Badge Color="BadgeColor.Primary" Class="me-1">@category.Name</Badge>
                                    }
                                </td>
                                <td>@plan.Activities.Count exercises</td>
                                <td>@plan.Description</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-3">
            <Pagination 
                ActivePageNumber="currentPage"
                TotalPages="totalPages"
                DisplayPages="MaxPagesDisplay"
                PageChanged="HandlePageChange"
                Size="PaginationSize.Small"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight" />
        </div>
    }
</div>

<DetailPlanModal @ref="detailPlanModal" />

@code {
    private bool isLoading = true;
    private string searchedPlanName = string.Empty;
    private int selectedCategoryId;
    private int currentPage = 1;
    private int totalPages;
    private const int MaxPlansPerPage = 10;
    private const int MaxPagesDisplay = 3;

    private List<TrainingPlanCategory> categories = new();
    private List<DefaultTrainingPlan> allPlans = new();
    private List<DefaultTrainingPlan> filteredPlans = new();
    private List<DefaultTrainingPlan> pagedPlans = new();
    
    private ConfirmDialog dialog = default!;
    private DetailPlanModal detailPlanModal = default!;

    protected override async Task OnInitializedAsync()
    {
        categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        await LoadAllPlans();
        await FilterPlans();
    }

    private async Task LoadAllPlans()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allPlans = (await DefaultTrainingPlanService.GetAllPlansAsync()).ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<AutoCompleteDataProviderResult<DefaultTrainingPlan>> PlansDataProvider(AutoCompleteDataProviderRequest<DefaultTrainingPlan> request)
    {
        if (allPlans == null || !allPlans.Any())
        {
            await LoadAllPlans();
        }

        return await Task.FromResult(request.ApplyTo(allPlans!));
    }

    private async Task FilterPlans()
    {
        filteredPlans = allPlans.ToList();

        // Apply category filter
        if (selectedCategoryId != 0)
        {
            filteredPlans = filteredPlans
                .Where(p => p.Categories.Any(c => c.Id == selectedCategoryId))
                .ToList();
        }

        // Apply search filter
        if (!string.IsNullOrEmpty(searchedPlanName))
        {
            filteredPlans = filteredPlans
                .Where(p => p.Name.Contains(searchedPlanName, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        totalPages = (int)Math.Ceiling(filteredPlans.Count / (double)MaxPlansPerPage);
        currentPage = 1;
        await UpdatePagedPlans();
    }

    private async Task ClearSearchFilter()
    {
        searchedPlanName = string.Empty;
        await FilterPlans();
    }

    private async Task ClearCategoryFilter()
    {
        selectedCategoryId = 0;
        await FilterPlans();
    }

    private Task UpdatePagedPlans()
    {
        pagedPlans = filteredPlans
            .Skip((currentPage - 1) * MaxPlansPerPage)
            .Take(MaxPlansPerPage)
            .ToList();

        return Task.CompletedTask;
    }

    private async Task HandlePageChange(int newPage)
    {
        currentPage = newPage;
        await UpdatePagedPlans();
    }

    private async Task ShowPlanDetails(DefaultTrainingPlan plan)
    {
        await detailPlanModal.Show(plan);
    }
}