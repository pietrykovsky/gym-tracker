@using System.Security.Claims
@using GymTracker.Services
@using GymTracker.Data
@using BlazorBootstrap

@inject IBodyMeasurementService MeasurementService
@inject ITrainingSessionService TrainingSessionService
@inject AuthenticationStateProvider AuthenticationStateProvider

@namespace GymTracker.Components.Dashboard

<ConfirmDialog @ref="dialog" />

<div class="row my-3">
    <h5 class="m-0">Measurements</h5>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!measurementList.Any() && !sessionList.Any())
    {
        <div class="text-muted">No measurements recorded for this date</div>
    }
    else
    {
        <div class="accordion" id="eventsAccordion">
            @foreach (var measurement in measurementList)
            {
                <BodyMeasurementItem 
                    Measurement="measurement"
                    IsExpanded="expandedMeasurementId == measurement.Id"
                    OnToggleRequested="ToggleMeasurement"
                    OnEditRequested="HandleMeasurementEdit"
                    OnDeleteRequested="DeleteMeasurement" />
            }

            @foreach (var session in sessionList)
            {
                <TrainingSessionItem
                    Session="session"
                    IsExpanded="expandedSessionId == session.Id"
                    OnToggleRequested="ToggleSession"
                    OnEditRequested="HandleSessionEdit"
                    OnDeleteRequested="DeleteSession" />
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public DateOnly? SelectedDate { get; set; }

    [Parameter]
    public EventCallback OnMeasurementsChanged { get; set; }

    [Parameter]
    public EventCallback OnSessionsChanged { get; set; }

    private bool _isLoading;
    private string? userId;
    private List<BodyMeasurement> measurementList = new();
    private List<TrainingSession> sessionList = new();
    private int? expandedMeasurementId;
    private int? expandedSessionId;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);

    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId))
        {
            await LoadEvents();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedDate.HasValue && !string.IsNullOrEmpty(userId))
        {
            await LoadEvents();
        }
    }

    private async Task LoadEvents()
    {
        if (_isLoading || !SelectedDate.HasValue || string.IsNullOrEmpty(userId))
        {
            return;
        }

        try
        {
            await _loadingSemaphore.WaitAsync();
            _isLoading = true;
            
            var measurements = await MeasurementService.GetMeasurementsInRangeAsync(
                userId,
                SelectedDate.Value,
                SelectedDate.Value
            );
            measurementList = measurements.ToList();

            var sessions = await TrainingSessionService.GetSessionsInRangeAsync(
                userId,
                SelectedDate.Value,
                SelectedDate.Value
            );
            sessionList = sessions.ToList();
        }
        finally
        {
            _isLoading = false;
            _loadingSemaphore.Release();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _loadingSemaphore.Dispose();
    }

    private void ToggleMeasurement(int measurementId)
    {
        expandedMeasurementId = expandedMeasurementId == measurementId ? null : measurementId;
        expandedSessionId = null;
    }

    private void ToggleSession(int sessionId)
    {
        expandedSessionId = expandedSessionId == sessionId ? null : sessionId;
        expandedMeasurementId = null;
    }

    private async Task HandleMeasurementEdit(BodyMeasurement measurement)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            await MeasurementService.UpdateMeasurementAsync(userId, measurement.Id, measurement);
            await LoadEvents();
            await OnMeasurementsChanged.InvokeAsync();
        }
    }

    private async Task HandleSessionEdit(TrainingSession session)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            await TrainingSessionService.UpdateSessionAsync(userId, session.Id, session);
            await LoadEvents();
            await OnSessionsChanged.InvokeAsync();
        }
    }

    private async Task DeleteMeasurement(BodyMeasurement measurement)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            var confirmed = await dialog!.ShowAsync(
                title: "Delete Measurement",
                message1: "Are you sure you want to delete this measurement?"
            );
            if (confirmed)
            {
                await MeasurementService.DeleteMeasurementAsync(userId, measurement.Id);
                await LoadEvents();
                await OnMeasurementsChanged.InvokeAsync();
            }
        }
    }

    private async Task DeleteSession(TrainingSession session)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            var confirmed = await dialog!.ShowAsync(
                title: "Delete Training Session",
                message1: "Are you sure you want to delete this training session?"
            );
            if (confirmed)
            {
                await TrainingSessionService.DeleteSessionAsync(userId, session.Id);
                await LoadEvents();
                await OnSessionsChanged.InvokeAsync();
            }
        }
    }
}